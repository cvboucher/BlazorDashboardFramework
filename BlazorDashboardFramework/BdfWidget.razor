@implements IDisposable
@if (!Widget.HideWidget)
{
    <div class="card mt-1 mb-3">
        @if (!Widget.HideHeader || editModeService.EditMode)
        {
            <div class="card-header hover-container">
                @(Widget.Title)
                <div class="float-end hover-effect fs-6">
                    @* <a href="" class="ms-1" title="Reload widget content" @onclick="@ReloadWidgetContent" @onclick:preventDefault>
                        <i class="bi bi-arrow-clockwise"></i>
                    </a> *@
                    @if (editModeService.EditMode)
                    {
                        <a href="" class="ms-1 drag-handle" title="Change widget location">
                            <i class="bi bi-arrows-move"></i>
                        </a>
                    }
                    <a href="" class="ms-1" title="@(Widget.Collapsed ? "Expand widget" : "Collapse widget")" @onclick="@ExpandCollapseWidget" @onclick:preventDefault>
                        <i class="bi @(Widget.Collapsed ? "bi-plus" : "bi-dash")"></i>
                    </a>
                    @if (editModeService.EditMode)
                    {
                        <a href="" class="ms-1" title="Copy Widget" @onclick="@CopyWidget" @onclick:preventDefault>
                            <i class="bi bi-copy"></i>
                        </a>
                        <a href="" class="ms-1" title="Edit widget configuration" @onclick="@EditWidgetConfiguration" @onclick:preventDefault>
                            <i class="bi bi-gear-fill"></i>
                        </a>
                        <a href="" class="ms-1" title="Remove widget" @onclick="@RemoveWidget" @onclick:preventDefault>
                            <i class="bi bi-trash3-fill"></i>
                        </a>
                    }
                </div>
            </div>
        }
        @if (!Widget.Collapsed && widgetType != null)
        {
            <div class="card-body">
                <DynamicComponent Type="@widgetType.ContentComponent" Parameters="@dynamicComponentParameters"  />
            </div>
        }
    </div>
}

@code {
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Parameter, EditorRequired] public WidgetInstance Widget { get; set; } = default!;
    [Parameter] public EventCallback<WidgetInstance> WidgetChanged { get; set; }
    [Parameter] public EventCallback<WidgetInstance> OnDeleteWidget { get; set; }
    [Parameter] public EventCallback<WidgetInstance> OnCopyWidget { get; set; }
    //[Parameter, EditorRequired] public Column Column { get; set; } = default!;

    [Inject] public EditModeService editModeService { get; set; } = default!;
    [Inject] public WidgetTypeService widgetService { get; set; } = default!;

    private Dictionary<string, object> dynamicComponentParameters { get; set; } = new();
    private WidgetType? widgetType;


    protected override void OnInitialized()
    {
        base.OnInitialized();
        editModeService.EditModeChanged += OnEditModeChanged;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!dynamicComponentParameters.ContainsKey("Widget"))
        {
            dynamicComponentParameters.Add("Widget", Widget);
            //dynamicComponentParameters.Add("WidgetChanged", EventCallback.Factory.Create<WidgetInstance>(this, WidgetInstanceChanged));
        }

        widgetType = widgetService.GetWidgetType(Widget.Type);
    }

    private async Task WidgetInstanceChanged(WidgetInstance widgetInstance)
    {
        await InvokeAsync(() => StateHasChanged());
    }


    private async void OnEditModeChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ReloadWidgetContent()
    {
        try
        {
            await Task.Delay(0);
            throw new NotImplementedException();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(ReloadWidgetContent)}: {ex}");
        }
    }

    public async Task ExpandCollapseWidget()
    {
        Widget.Collapsed = !Widget.Collapsed;
        await WidgetChanged.InvokeAsync(Widget);
    }

    public async Task EditWidgetConfiguration()
    {
        try
        {
            var parameters = new ModalParameters()
                .Add(nameof(WidgetInstance), Widget);
            var modal = Modal.Show<BdfWidgetConfigForm>($"Edit {Widget.Title}", parameters);
            await modal.Result;
            await WidgetChanged.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(EditWidgetConfiguration)}: {ex}");
        }
    }

    public async Task RemoveWidget()
    {
        try
        {
            await OnDeleteWidget.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(RemoveWidget)}: {ex}");
        }
    }

    public async Task CopyWidget()
    {
        try
        {
            await OnCopyWidget.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(RemoveWidget)}: {ex}");
        }
    }

    public void Dispose()
    {
        editModeService.EditModeChanged -= OnEditModeChanged;
    }
}
