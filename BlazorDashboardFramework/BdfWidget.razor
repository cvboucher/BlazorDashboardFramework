@implements IDisposable
@if (!Widget.HideWidget || editModeService.EditMode)
{
    <div class="card mt-1 mb-3">
        @if (!Widget.HideHeader || editModeService.EditMode)
        {
            <div class="card-header hover-container">
                @(Widget.Title)
                <div class="float-end hover-effect fs-6">
                    @* <a href="" class="ms-1" title="Reload widget content" @onclick="@ReloadWidgetContent" @onclick:preventDefault>
                        <i class="bi bi-arrow-clockwise"></i>
                    </a> *@
                    @if (editModeService.EditMode)
                    {
                        <a href="" class="ms-1 drag-handle" title="Change widget location">
                            <i class="bi bi-arrows-move"></i>
                        </a>
                    }
                    <a href="" class="ms-1" title="@(Widget.Collapsed ? "Expand widget" : "Collapse widget")" @onclick="@ExpandCollapseWidget" @onclick:preventDefault>
                        <i class="bi @(Widget.Collapsed ? "bi-plus" : "bi-dash")"></i>
                    </a>
                    @if (editModeService.EditMode)
                    {
                        <a href="" class="ms-1" title="Copy Widget" @onclick="@CopyWidget" @onclick:preventDefault>
                            <i class="bi bi-copy"></i>
                        </a>
                        <a href="" class="ms-1" title="Edit widget configuration" @onclick="@EditWidgetConfiguration" @onclick:preventDefault>
                            <i class="bi bi-gear-fill"></i>
                        </a>
                        <a href="" class="ms-1" title="Remove widget" @onclick="@RemoveWidget" @onclick:preventDefault>
                            <i class="bi bi-trash3-fill"></i>
                        </a>
                    }
                </div>
            </div>
        }
        @if (widgetParameters != null && !Widget.Collapsed && widgetType != null)
        {
            <div class="card-body">
                <DynamicComponent Type="@widgetType.DisplayComponent" Parameters="widgetParameters" />
            </div>
        }
    </div>
}

@code {
    [CascadingParameter] IModalService Modal { get; set; } = default!;

    [Parameter, EditorRequired] public WidgetInstance Widget { get; set; } = default!;
    [Parameter] public EventCallback<WidgetInstance> WidgetChanged { get; set; }
    [Parameter] public EventCallback<WidgetInstance> OnDeleteWidget { get; set; }
    [Parameter] public EventCallback<WidgetInstance> OnCopyWidget { get; set; }

    [Inject] public EditModeService editModeService { get; set; } = default!;
    [Inject] public WidgetTypeService widgetTypeService { get; set; } = default!;

    private Dictionary<string, object>? widgetParameters;

    private WidgetType? widgetType;


    protected override void OnInitialized()
    {
        editModeService.EditModeChanged += OnEditModeChanged;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (widgetType == null)
            widgetType = widgetTypeService.GetWidgetType(Widget.Type);
        if (widgetParameters == null)
            LoadWidgetParameters();
        base.OnParametersSet();
    }

    private void LoadWidgetParameters()
    {
        if (Widget == null || widgetType == null)
            return;
        widgetParameters = new Dictionary<string, object>();
        var config = widgetType.GetConfig(Widget?.Config);
        if (config != null)
            widgetParameters.Add("Config", config);
        if (widgetType.SetHideHeaderEventCallback)
            widgetParameters.Add("SetHideHeader", EventCallback.Factory.Create<bool>(this, OnSetHideHeader));
        if (widgetType.ToggleHideHeaderEventCallback)
            widgetParameters.Add("ToggleHideHeader", EventCallback.Factory.Create(this, OnToggleHideHeader));
        if (widgetType.SetCollapsedEventCallback)
            widgetParameters.Add("SetCollapsed", EventCallback.Factory.Create<bool>(this, OnSetCollapsed));
        if (widgetType.ToggleCollapsedEventCallback)
            widgetParameters.Add("ToggleCollapsed", EventCallback.Factory.Create(this, OnToggleCollapsed));
        if (widgetType.SetHideWidgetEventCallback)
            widgetParameters.Add("SetHideWidget", EventCallback.Factory.Create<bool>(this, OnSetHideWidget));
    }

    // public Dictionary<string, object> GetDynamicComponentParameters()
    // {
    //     var parameters = new Dictionary<string, object>();
    //     if (widgetType != null)
    //     {
    //         var config = widgetType.GetConfig(Widget?.Config);
    //         if (config != null)
    //             parameters.Add("Config", config);
    //         if (widgetType.SetHideHeaderEventCallback)
    //             parameters.Add("SetHideHeader", EventCallback.Factory.Create<bool>(this, OnSetHideHeader));
    //         if (widgetType.ToggleHideHeaderEventCallback)
    //             parameters.Add("ToggleHideHeader", EventCallback.Factory.Create(this, OnToggleHideHeader));
    //         if (widgetType.SetCollapsedEventCallback)
    //             parameters.Add("SetCollapsed", EventCallback.Factory.Create<bool>(this, OnSetCollapsed));
    //         if (widgetType.ToggleCollapsedEventCallback)
    //             parameters.Add("ToggleCollapsed", EventCallback.Factory.Create(this, OnToggleCollapsed));
    //         if (widgetType.SetHideWidgetEventCallback)
    //             parameters.Add("SetHideWidget", EventCallback.Factory.Create<bool>(this, OnSetHideWidget));


    //     }
    //     return parameters;
    // }

    private void OnSetCollapsed(bool collapsed)
    {
        Widget.Collapsed = collapsed;
    }

    private void OnSetHideHeader(bool hideHeader)
    {
        Widget.HideHeader = hideHeader;
    }

    private void OnToggleHideHeader()
    {
        Widget.HideHeader = !Widget.HideHeader;
    }

    private void OnSetHideWidget(bool hideWidget)
    {
        Widget.HideWidget = hideWidget;
    }

    private void OnToggleCollapsed()
    {
        Widget.Collapsed = !Widget.Collapsed;
    }

    private async Task WidgetInstanceChanged(WidgetInstance widgetInstance)
    {
        await InvokeAsync(() => StateHasChanged());
    }


    private async void OnEditModeChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ReloadWidgetContent()
    {
        try
        {
            await Task.Delay(0);
            throw new NotImplementedException();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(ReloadWidgetContent)}: {ex}");
        }
    }

    public async Task ExpandCollapseWidget()
    {
        Widget.Collapsed = !Widget.Collapsed;
        await WidgetChanged.InvokeAsync(Widget);
    }

    public async Task EditWidgetConfiguration()
    {
        try
        {
            var parameters = new ModalParameters()
                .Add(nameof(WidgetInstance), Widget);
            var modal = Modal.Show<BdfWidgetConfigForm>($"Edit {Widget.Title}", parameters);
            var result = await modal.Result;
            if (result.Confirmed)
            {
                LoadWidgetParameters();
                await WidgetChanged.InvokeAsync(Widget);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(EditWidgetConfiguration)}: {ex}");
        }
    }

    public async Task RemoveWidget()
    {
        try
        {
            await OnDeleteWidget.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(RemoveWidget)}: {ex}");
        }
    }

    public async Task CopyWidget()
    {
        try
        {
            await OnCopyWidget.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(RemoveWidget)}: {ex}");
        }
    }

    public void Dispose()
    {
        editModeService.EditModeChanged -= OnEditModeChanged;
    }
}
