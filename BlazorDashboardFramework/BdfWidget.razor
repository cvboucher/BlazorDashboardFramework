@implements IDisposable
@if (!HideWidget || editModeService.EditMode)
{
    <div class="card mt-1 mb-3">
        @if (!HideHeader || editModeService.EditMode)
        {
            <div class="card-header hover-container">
                @(Widget.Title)
                <div class="float-end hover-effect fs-6">
                    @if (editModeService.EditMode)
                    {
                        <button type="button" class="btn btn-link btn-xs drag-handle" title="Change widget location">
                            <i class="bi bi-arrows-move"></i>
                         </button>
                    }
                    @if (isIRefresh)
                    {
                        <button type="button" class="btn btn-link btn-xs" @onclick="@RefreshContent" title="Refresh Content">
                            <i class="bi bi-arrow-clockwise"></i>
                        </button>
                    }
                    <button type="button" class="btn btn-link btn-xs" @onclick="@ExpandCollapseWidget" title="Expand/Collapse Widget">
                        <i class="bi @(Collapsed ? "bi-caret-right-fill" : "bi-caret-down-fill")"></i>
                    </button>

                    @if (editModeService.EditMode)
                    {
                        <button type="button" class="btn btn-link btn-xs" @onclick="@CopyWidget" title="Copy Widget">
                            <i class="bi bi-copy"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-xs" @onclick="@EditWidgetConfiguration" title="Edit widget configuration">
                            <i class="bi bi-gear-fill"></i>
                        </button>
                        <button type="button" class="btn btn-link btn-xs" @onclick="@RemoveWidget" title="Remove widget">
                            <i class="bi bi-trash3-fill"></i>
                        </button>
                    }
                </div>
            </div>
        }
        <div class="@(collapsed ? "d-none" : null) card-body">
            @if (widgetParameters != null && widgetType != null)
            {
                    <CascadingValue Value="@this">
                    <DynamicComponent @ref="dynamicComponentRef" Type="@widgetType.DisplayComponent" Parameters="widgetParameters" />
                    </CascadingValue>
            }
            else
            {
                <h1>@Widget.Type</h1>
            }
        </div>
    </div>
}

@if (editModeService.EditMode)
{
    <BdfWidgetConfigForm WidgetInstance="@Widget" 
                         @ref="@bdfWidgetConfigForm" 
                         WidgetInstanceChanged="OnWidgetInstanceChanged" />
}

@code {
    [Parameter, EditorRequired] public WidgetInstance Widget { get; set; } = default!;
    [Parameter] public EventCallback<WidgetInstance> WidgetChanged { get; set; }
    [Parameter] public EventCallback<WidgetInstance> OnDeleteWidget { get; set; }
    [Parameter] public EventCallback<WidgetInstance> OnCopyWidget { get; set; }

    [Inject] public EditModeService editModeService { get; set; } = default!;
    [Inject] public WidgetTypeService widgetTypeService { get; set; } = default!;

    private Dictionary<string, object>? widgetParameters;
    private BdfWidgetConfigForm? bdfWidgetConfigForm;
    private WidgetType? widgetType;

    private DynamicComponent? dynamicComponentRef;

    private bool isIRefresh => widgetType != null && typeof(IRefresh).IsAssignableFrom(widgetType.DisplayComponent);

    private async Task RefreshContent()
    {
        if (dynamicComponentRef?.Instance != null && isIRefresh)
            await ((IRefresh)dynamicComponentRef.Instance).Refresh();
    }

    protected override void OnInitialized()
    {
        editModeService.EditModeChanged += OnEditModeChanged;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (widgetType == null)
        {
            widgetType = widgetTypeService.GetWidgetType(Widget.Type);
            if (widgetType != null)
            {
                HideHeader = widgetType.HideHeader;
                Collapsed = widgetType.Collapsed;
                HideWidget = widgetType.HideWidget;
            }
        }
        //if (widgetParameters == null)
        await LoadWidgetParameters();
        await base.OnParametersSetAsync();
    }
    // protected override void OnParametersSet()
    // {
    //     if (widgetType == null)
    //     {
    //         widgetType = widgetTypeService.GetWidgetType(Widget.Type);
    //         if (widgetType != null)
    //         {
    //             HideHeader = widgetType.HideHeader;
    //             Collapsed = widgetType.Collapsed;
    //             HideWidget = widgetType.HideWidget;
    //         }
    //     }
    //     //if (widgetParameters == null)
    //     await LoadWidgetParameters();
    //     base.OnParametersSet();
    // }

    private async void OnWidgetInstanceChanged(WidgetInstance widgetInstance)
    {
        Widget = widgetInstance;
        await LoadWidgetParameters();
    }

    private async Task LoadWidgetParameters()
    {
        try
        {
            if (Widget == null || widgetType == null)
                return;
            widgetParameters = new Dictionary<string, object>();
            var config = widgetType.GetConfig(Widget?.Config);
            if (config != null)
                widgetParameters.Add("Config", config);
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private bool hideWidget;
    public bool HideWidget
    {
        get => hideWidget;
        set 
        {
            if (hideWidget != value)
            {
                hideWidget = value;
                StateHasChanged();
            }
        }
    }

    private bool collapsed;
    public bool Collapsed
    {
        get => collapsed;
        set
        {
            if (collapsed != value)
            {
                collapsed = value;
                StateHasChanged();
            }
        }
    }

    private bool hideHeader;
    public bool HideHeader
    {
        get => hideHeader;
        set 
        {
            if (hideHeader != value)
            {
                hideHeader = value;
                StateHasChanged();
            }
        }
    }

    private async Task WidgetInstanceChanged(WidgetInstance widgetInstance)
    {
        await LoadWidgetParameters();
        await InvokeAsync(() => StateHasChanged());
    }


    private async void OnEditModeChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ReloadWidgetContent()
    {
        try
        {
            await Task.Delay(0);
            throw new NotImplementedException();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(ReloadWidgetContent)}: {ex}");
        }
    }

    public void ExpandCollapseWidget()
    {
        Collapsed = !Collapsed;
    }

    public async Task EditWidgetConfiguration()
    {
        if (bdfWidgetConfigForm != null)
            await bdfWidgetConfigForm.Open();
    }

    public async Task RemoveWidget()
    {
        try
        {
            await OnDeleteWidget.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(RemoveWidget)}: {ex}");
        }
    }

    public async Task CopyWidget()
    {
        try
        {
            await OnCopyWidget.InvokeAsync(Widget);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"{nameof(RemoveWidget)}: {ex}");
        }
    }

    public void Dispose()
    {
        editModeService.EditModeChanged -= OnEditModeChanged;
    }
}
