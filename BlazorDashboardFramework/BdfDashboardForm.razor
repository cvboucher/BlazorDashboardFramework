<BootstrapModal @ref="@modalDialog" 
                Title="Edit Dashboard" 
                OnClose="OnModalClose" 
                OnOpen="OnModalOpen">
    <BodyContent>
        <EditForm Model="@Dashboard">
            <div class="mb-3">
                <label for="title" class="form-label">Dashboard Title</label>
                <input type="text" class="form-control" id="title" aria-describedby="title" @bind-value="@Dashboard.Title">
            </div>
            <div class="row mb-3">
                <InputRadioGroup Name="layout" @bind-Value="@Dashboard.Layout">
                    <label for="layout" class="form-label">Layout (@Dashboard.Layout)</label>
                    @foreach (var kvp in layoutService.Structures)
                    {
                        <div class="col-md-1 mb-3">
                            <InputRadio Name="layout" Value="kvp.Key" class="float-end" />
                        </div>
                        <div class="col-md-5 mb-3 @(kvp.Key == Dashboard.Layout ? "selected" : string.Empty)">
                            <BdfLayoutPreview dashboard="@kvp.Value" />
                        </div>

                    }
                </InputRadioGroup>
            </div>
        </EditForm>
    </BodyContent>
    <FooterContent>
        <button type="submit" class="btn btn-primary" @onclick="@Close">Close</button>
    </FooterContent>
</BootstrapModal>


@code {
    [Parameter, EditorRequired] public Dashboard Dashboard { get; set; } = default!;
    [Parameter] public EventCallback<Dashboard> DashboardChanged { get; set; } = default!;
    
    [Inject] StructureService layoutService { get; set; } = default!;
    
    private string? currentLayout;
    private BootstrapModal modalDialog { get; set; } = default!;

    public async Task Open()
    {
        await modalDialog.Open();
    }

    public async Task Close()
    {
        await modalDialog.Close();
    }

    private async Task OnModalOpen()
    {
        await Task.Delay(0);
        currentLayout = Dashboard.Layout;
    }

    private async Task OnModalClose()
    {
        if(string.IsNullOrWhiteSpace(currentLayout) || !currentLayout.Equals(Dashboard.Layout))
        {
            var existingWidgets = Dashboard.GetAllWidgets();
            var newLayout = layoutService.GetLayout(Dashboard.Layout);
            if (newLayout != null)
            {
                newLayout.PopulateWidgets(existingWidgets);
                Dashboard.Rows = newLayout.Rows;
            }
        }
        await DashboardChanged.InvokeAsync(Dashboard);
    }
}
