@using System.Text.Json
<BootstrapModal @ref=@modalDialog
                Title="@WidgetInstance.Title"
                OnOpen="OnModalOpen">
    <BodyContent>
        @if (editContext != null)
        {
            <EditForm EditContext="editContext" 
                    OnValidSubmit="OnValidSubmitClicked" 
                    class="form">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label class="form-label">Title</label>
                    <InputText @bind-Value=@WidgetInstance.Title
                               class="form-control" />
                </div>
                @if (widgetType != null && widgetType.EditComponent != null && dynamicComponentParameters != null)
                {
                    <DynamicComponent Type="widgetType.EditComponent" Parameters="dynamicComponentParameters" />
                }
                <div class="float-end">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="OnCancelClicked">Cancel</button>
                </div>
            </EditForm>
        }
    </BodyContent>
</BootstrapModal>
@code {
    [Parameter] public WidgetInstance WidgetInstance { get; set; } = default!;
    [Parameter] public EventCallback<WidgetInstance> WidgetInstanceChanged { get; set; } 

    [Inject] public WidgetTypeService widgetTypeService { get; set; } = default!;

    private BootstrapModal modalDialog { get; set; } = default!;
    private EditContext editContext = default!;
    private WidgetType? widgetType;
    private object? configObject;
    private Dictionary<string, object> dynamicComponentParameters = default!;

    public async Task Open()
    {
        await modalDialog.Open();
    }

    private async Task Close()
    {
        await modalDialog.Close();
    }

    private async Task OnValidSubmitClicked()
    {
        if (configObject != null)
            WidgetInstance.Config = JsonSerializer.Serialize(configObject);
        await WidgetInstanceChanged.InvokeAsync(WidgetInstance);
        await Close();
    }

    private async Task OnCancelClicked()
    {
        await Close();
    }

    private async Task OnModalOpen()
    {
        await Task.Delay(0);
        try
        {
            widgetType = widgetTypeService.GetWidgetType(WidgetInstance.Type)
                ?? throw new Exception($"WidgetType {WidgetInstance.Type} not found.");
            editContext = new EditContext(WidgetInstance);
            if (widgetType.ConfigType == null)
                return;
            configObject = widgetType.GetConfig(WidgetInstance.Config);
            //editContext = new EditContext(configObject ?? WidgetInstance);
            if (configObject != null)
                dynamicComponentParameters = new Dictionary<string, object>()
                {
                    { "Config", configObject}
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
