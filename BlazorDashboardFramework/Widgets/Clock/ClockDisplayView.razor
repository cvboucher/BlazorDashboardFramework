@implements IDisposable
<div class="text-center fs-2">@clockWidgetService.CurrentDateTime.ToString(GetClockFormat())</div>
@code {
    [CascadingParameter] public BdfWidget bdfWidget { get; set; } = default!;
    [Parameter] public ClockConfig Config { get; set; } = default!;
    [Inject] ClockWidgetService clockWidgetService { get; set; } = default!;

    private bool ranOnce;

    protected override void OnInitialized()
    {
        clockWidgetService.CurrentDateTimeChanged += OnCurrentDateTimeChanged;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (Config.HideHeader)
            bdfWidget.HideHeader = true;
    }

    private string GetClockFormat()
    {
        return string.IsNullOrWhiteSpace(Config?.Format)
            ? "T"
            : Config.Format;
    }

    private async void OnCurrentDateTimeChanged(object? sender, DateTime e)
    {
        await InvokeAsync(() => StateHasChanged());
    }
      
    public void Dispose()
    {
        clockWidgetService.CurrentDateTimeChanged -= OnCurrentDateTimeChanged;
    }
}
