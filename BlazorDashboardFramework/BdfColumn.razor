@implements IDisposable
<div class="column @Column.StyleClass @GetEditModeClass()">
    @if (Column.Rows.Any())
    {
        <BdfRows @bind-Rows="@Column.Rows" />
    }
    else if (editModeService.EditMode)
    {
        <SortableList Group="bdf"
                      Items="Column.Widgets"
                      Context="widget"
                      Handle=".drag-handle"
                      Id="@Column.ColumnId">
            <SortableItemTemplate>
                <div style="width: 100%;">
                    <BdfWidget Widget="@widget"
                               @key=@widget.WidgetInstanceId
                               OnDeleteWidget="@(() => DeleteWidgetInstance(Column, widget))"
                               OnCopyWidget="@(() => CopyWidgetInstance(Column, widget))" />
                </div>
            </SortableItemTemplate>
        </SortableList>
    }
    else
    {
        @for (var c = 0; c < Column.Widgets.Count; c++)
        {
            <BdfWidget @key=@Column.Widgets[c].WidgetInstanceId @bind-Widget="Column.Widgets[c]" />
        }
    }
</div>

@code {
    [CascadingParameter] Dashboard dashboard { get; set; } = default!;
    [Parameter, EditorRequired] public Column Column { get; set; } = default!;
    [Parameter] public EventCallback<Column> ColumnChanged { get; set; } = default!;

    [Inject] public EditModeService editModeService { get; set; } = default!;
    [Inject] public SortableListService sortableListService { get; set; } = default!;

    protected override void OnInitialized()
    {
        editModeService.EditModeChanged += OnEditModeChanged;
        sortableListService.ItemAdded += SortableListService_ItemAdded;
        sortableListService.ItemRemoved += SortableListService_ItemRemoved;
        base.OnInitialized();
    }

    private async void OnEditModeChanged(object? sender, EventArgs e)
    {
        await ColumnChanged.InvokeAsync(Column);
        await InvokeAsync(() => StateHasChanged());
    }

    private string GetEditModeClass()
    {
        return editModeService.EditMode ? "edit" : string.Empty;
    }

    public async void SortableListService_ItemRemoved(object? sender, SortableListEventArgs e)
    {
        if (e.Id != Column.ColumnId)
            return;
        Column.Widgets.RemoveAt(e.Index);
        await InvokeAsync(() => StateHasChanged());
    }

    public async void SortableListService_ItemAdded(object? sender, SortableListEventArgs e)
    {
        if (e.Id != Column.ColumnId)
            return;
        if (e.Index < Column.Widgets.Count)
            Column.Widgets.Insert(e.Index, (WidgetInstance)e.Item);
        else
            Column.Widgets.Add((WidgetInstance)e.Item);
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task DeleteWidgetInstance(Column column, WidgetInstance widgetInstance)
    {
        var instance = column.Widgets.FirstOrDefault(x => x.WidgetInstanceId == widgetInstance.WidgetInstanceId);
        if (instance != null)
        {
            column.Widgets.Remove(instance);
            await ColumnChanged.InvokeAsync(Column);
        }
    }

    private async Task CopyWidgetInstance(Column column, WidgetInstance widgetInstance)
    {
        var instance = column.Widgets.FirstOrDefault(x => x.WidgetInstanceId == widgetInstance.WidgetInstanceId);
        if (instance != null)
        {
            var index = column.Widgets.IndexOf(instance);
            var copy = instance.DeepCopy();
            if (copy != null)
            {
                copy.WidgetInstanceId = Guid.NewGuid().ToString();
                column.Widgets.Insert(index, copy);
                await ColumnChanged.InvokeAsync(Column);
            }
        }
    }

    public void Dispose()
    {
        editModeService.EditModeChanged -= OnEditModeChanged;
        sortableListService.ItemAdded -= SortableListService_ItemAdded;
        sortableListService.ItemRemoved -= SortableListService_ItemRemoved;
    }
}
